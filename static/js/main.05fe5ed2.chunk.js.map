{"version":3,"sources":["static/drizzle.png","static/rain-d.png","static/snow.png","static/clear-d.png","static/clouds-d.png","static/mist.png","components/SearchPanel.js","components/WeatherContainer.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchPanel","react_default","a","createElement","className","autoComplete","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","WeatherContainer","time","imageMain","Rain","Thunderstorm","Drizzle","Snow","Clear","Clouds","Default","getTime","Date","toTimeString","split","weatherData","main","date","toDateString","error","city","country","Math","round","temperature","wind","pressure","humidity","src","alt","sunrise","sunset","Error","class","API_KEY","App","state","weather","ready","e","preventDefault","target","elements","value","_this","setState","Object","asyncToGenerator","regenerator_default","mark","_callee","apiCall","data","wrap","_context","prev","next","fetch","concat","sent","json","dt","sys","temp","speed","description","t0","stop","keys","length","components_WeatherContainer","components_Error","components_SearchPanel","renderError","renderWeatherContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.05fe5ed2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drizzle.7436b193.png\";","module.exports = __webpack_public_path__ + \"static/media/rain-d.51b38da8.png\";","module.exports = __webpack_public_path__ + \"static/media/snow.64473a6d.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-d.5671dc69.png\";","module.exports = __webpack_public_path__ + \"static/media/clouds-d.b92a08fe.png\";","module.exports = __webpack_public_path__ + \"static/media/mist.0b39c8a4.png\";","import React from 'react';\n\nclass SearchPanel extends React.Component {\n    render() {\n        return (\n            <div className='search-panel'>\n                <form autoComplete='off' onSubmit={this.props.getWeather}>\n                    <input type=\"text\" autoComplete='false' name='hidden' className='search-panel__hide-input' />\n                    <input type='text' name='city' placeholder='City...' />\n                    <button>Get weather</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SearchPanel;","import React from 'react';\nimport Rain from '../static/rain-d.png';\nimport Thunderstorm from '../static/drizzle.png';\nimport Drizzle from '../static/drizzle.png';\nimport Snow from '../static/snow.png';\nimport Clear from '../static/clear-d.png';\nimport Clouds from '../static/clouds-d.png';\nimport Default from '../static/mist.png';\n\nclass WeatherContainer extends React.Component {\n\n    render() {\n        const imageMain = {\n            Rain,\n            Thunderstorm,\n            Drizzle,\n            Snow,\n            Clear,\n            Clouds,\n            Default\n        }\n        const getFullTime = (time) => {\n            let myDate = new Date(time * 1000);\n            return myDate.toDateString()\n        }\n\n        const getTime = (time) => {\n            let myTime = new Date(time * 1000);\n            return myTime.toTimeString().split(' ')[0];\n        }\n\n        if (!imageMain[this.props.weatherData.main]) {\n            this.props.weatherData.main = 'Default';\n        }\n\n        return (\n            <div className='weather-container' >\n                <div className='date-container'>\n                    <div>{getFullTime(this.props.weatherData.date)}</div>\n                </div>\n                <div className='weather-conditions'>\n                    <div>\n                        {this.props.weatherData.error && <div>{this.props.weatherData.error}</div>}\n                        <div className='weather-city'>{this.props.weatherData.city},{this.props.weatherData.country}</div>\n                        <div className='weather-temperature'>{Math.round(this.props.weatherData.temperature)}Â°</div>\n                        <div>Wind: {this.props.weatherData.wind}km/h</div>\n                        <div>Pressure: {this.props.weatherData.pressure}MB</div>\n                        <div>Humodity: {this.props.weatherData.humidity}%</div>\n                    </div>\n                    <div>\n                        <div className='weather-img'>\n                            <img src={imageMain[this.props.weatherData.main]} alt={this.props.weatherData.main} />\n                        </div>\n                        <div>Sunrise: {getTime(this.props.weatherData.sunrise)}</div>\n                        <div>Sunset: {getTime(this.props.weatherData.sunset)}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WeatherContainer;","import React from 'react';\n\nclass Error extends React.Component {\n    render() {\n        return (\n            <h1 class=\"error\">\n                {this.props.error}\n            </h1>\n        )\n    }\n}\n\nexport default Error;","import React from 'react';\n\nimport SearchPanel from './components/SearchPanel';\nimport WeatherContainer from './components/WeatherContainer';\nimport Error from './components/Error';\n\nconst API_KEY = '17c95714008c4648066caaeccfd855e7';\n\nclass App extends React.Component {\n  state = {\n    weather: {},\n    ready: true,\n    error: null\n  }\n\n  getWeather = (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    this.setState({ ready: false }, async () => {\n\n      if (city) {\n        try {\n          const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n          const data = await apiCall.json();\n          const weatherData = {\n            date: data.dt,\n            city: data.name,\n            country: data.sys.country,\n            temperature: data.main.temp,\n            wind: data.wind.speed,\n            pressure: data.main.pressure,\n            humidity: data.main.humidity,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            main: data.weather[0].main,\n            description: data.weather[0].description,\n          };\n\n          this.setState({\n            weather: weatherData,\n            ready: true,\n            error: null\n          });\n        } catch (e) {\n          this.setState({\n            weather: {},\n            ready: true,\n            error: 'Enter correct city title!'\n          })\n        }\n      } else {\n        this.setState({ error: 'Enter city title!' });\n      }\n    })\n  }\n\n  renderWeatherContainer() {\n    const { weather } = this.state;\n\n    return Object.keys(weather).length > 0 && <WeatherContainer weatherData={weather} />\n  }\n\n  renderError() {\n    return (\n      <Error error={this.state.error} />\n    )\n  }\n\n  render() {\n    const { error } = this.state;\n\n    return (\n      <div className='container'>\n        <SearchPanel getWeather={this.getWeather} />\n        {error ? this.renderError() : this.renderWeatherContainer()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}